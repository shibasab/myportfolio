{"version":3,"sources":["components/Navigation/Navigation.js","components/About/About.js","components/Skills/Skills.js","components/Experience/Experience.js","components/Products/Products.js","components/Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","About","Skills","Experience","Products","Contact","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAgCeA,G,MA3BI,WACjB,OACE,wBAAIC,UAAU,UACZ,4BACE,uBAAGA,UAAU,SAASC,KAAK,SAA3B,QAIF,4BACE,uBAAGA,KAAK,SAAR,UAEF,4BACE,uBAAGA,KAAK,WAAR,WAEF,4BACE,uBAAGA,KAAK,eAAR,eAEF,4BACE,uBAAGA,KAAK,aAAR,aAEF,4BACE,uBAAGA,KAAK,YAAR,eCpBOC,EAJD,WACZ,OAAO,+DCGMC,EAJA,WACb,OAAO,4HCGMC,EAJI,WACjB,OAAO,4KCGMC,EAJE,WACf,OAAO,wFCGMC,EAJC,WACd,OAAO,sECmBMC,E,iLAZX,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUQ,a,MCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.26156390.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\n//ナビゲーションバー\r\n//それぞれの要素のリンクを貼る\r\n//スクロールしても常に上に表示されるようにする\r\nconst Navigation = () => {\r\n  return (\r\n    <ul className=\"topnav\">\r\n      <li>\r\n        <a className=\"active\" href=\"#home\">\r\n          Top\r\n        </a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#news\">About</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#skills\">Skills</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#experience\">Experience</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#products\">Products</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#contact\">Contact</a>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return <h1>TODO: 自己紹介</h1>;\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\n\r\nconst Skills = () => {\r\n  return <h1>TODO : 言語やフレームワークについて</h1>;\r\n};\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\n\r\nconst Experience = () => {\r\n  return <h1>TODO : 勉強してきたことやアルバイトでやったことなど</h1>;\r\n};\r\n\r\nexport default Experience;\r\n","import React from 'react';\r\n\r\nconst Products = () => {\r\n  return <h1>TODO : 作ったアプリなど</h1>;\r\n};\r\n\r\nexport default Products;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n  return <h1>TODO : 連絡先など</h1>;\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Component } from 'react';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport About from './components/About/About';\r\nimport Skills from './components/Skills/Skills';\r\nimport Experience from './components/Experience/Experience';\r\nimport Products from './components/Products/Products';\r\nimport Contact from './components/Contact/Contact';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Navigation />\r\n        <About />\r\n        <Skills />\r\n        <Experience />\r\n        <Products />\r\n        <Contact />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}