{"version":3,"sources":["components/Navigation/Navigation.js","components/About/About.js","components/Card/Card.js","components/Skills/Skills.js","components/Home/Home.js","components/Products/Products.js","components/Contact/Contact.js","404.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","to","className","About","CardLanguageGroups","Card","Group","itemsPerRow","color","Content","Header","Meta","Description","CardFrameworkGroups","panes","menuItem","render","Tab","Pane","Skills","Home","Products","Contact","NotFound","App","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd2b9d34.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navigation.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\" className=\"link\">\r\n            Home\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/about\" className=\"link\">\r\n            About\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/skills\" className=\"link\">\r\n            Skills\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/products\" className=\"link\">\r\n            Products\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/contact\" className=\"link\">\r\n            Contact\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <p>このページについて</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Card } from 'semantic-ui-react';\r\nimport './Card.css';\r\n\r\nconst CardLanguageGroups = () => (\r\n  <Card.Group itemsPerRow={3}>\r\n    <Card color=\"yellow\">\r\n      <Card.Content>\r\n        <Card.Header>Python</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2017/5~</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          画像処理をやったりDjangoでWebアプリケーションを作ったりしています。\r\n        </Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n    <Card color=\"blue\">\r\n      <Card.Content>\r\n        <Card.Header>Go</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2019/8~</span>\r\n        </Card.Meta>\r\n        <Card.Description>勉強中です。</Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n    <Card color=\"brown\">\r\n      <Card.Content>\r\n        <Card.Header>C</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2017/3~</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          初めて触った言語です。大学の授業で使ってます。\r\n        </Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n    <Card color=\"green\">\r\n      <Card.Content>\r\n        <Card.Header>Java</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2019/4~</span>\r\n        </Card.Meta>\r\n        <Card.Description>大学の授業で使ってます。</Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n    <Card color=\"red\">\r\n      <Card.Content>\r\n        <Card.Header>Ruby</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2019/5~</span>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          Railsで時間割管理アプリケーションを作りました。\r\n        </Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n    <Card color=\"pink\">\r\n      <Card.Content>\r\n        <Card.Header>Javascript</Card.Header>\r\n        <Card.Meta>\r\n          <span className=\"date\">2019/8~</span>\r\n        </Card.Meta>\r\n        <Card.Description>勉強中です。</Card.Description>\r\n      </Card.Content>\r\n    </Card>\r\n  </Card.Group>\r\n);\r\n\r\nconst CardFrameworkGroups = () => {\r\n  return (\r\n    <Card.Group itemsPerRow={3}>\r\n      <Card color=\"yellow\">\r\n        <Card.Content>\r\n          <Card.Header>React</Card.Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">2019/6~</span>\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            このサイトはReactを使用しています。\r\n          </Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n      <Card color=\"yellow\">\r\n        <Card.Content>\r\n          <Card.Header>Django</Card.Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">2019/5~</span>\r\n          </Card.Meta>\r\n          <Card.Description>勉強中です。</Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n      <Card color=\"yellow\">\r\n        <Card.Content>\r\n          <Card.Header>Django REST framework</Card.Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">2019/8~</span>\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            Reactと組み合わせてTodoアプリケーションを作りました。\r\n          </Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n      <Card color=\"yellow\">\r\n        <Card.Content>\r\n          <Card.Header>Tensorflow</Card.Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">2017/9~</span>\r\n          </Card.Meta>\r\n          <Card.Description>モデル作りに使用しています。</Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n      <Card color=\"yellow\">\r\n        <Card.Content>\r\n          <Card.Header>OpenVINO</Card.Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">2018/12~</span>\r\n          </Card.Meta>\r\n          <Card.Description>推論に使っています。</Card.Description>\r\n        </Card.Content>\r\n      </Card>\r\n    </Card.Group>\r\n  );\r\n};\r\n\r\nexport { CardLanguageGroups, CardFrameworkGroups };\r\n","import React from 'react';\r\nimport { CardLanguageGroups, CardFrameworkGroups } from '../Card/Card';\r\nimport { Tab } from 'semantic-ui-react';\r\n\r\nconst panes = [\r\n  {\r\n    menuItem: 'Language',\r\n    render: () => (\r\n      <div>\r\n        <Tab.Pane>\r\n          <CardLanguageGroups />\r\n        </Tab.Pane>\r\n      </div>\r\n    )\r\n  },\r\n  {\r\n    menuItem: 'Framework',\r\n    render: () => (\r\n      <Tab.Pane>\r\n        <CardFrameworkGroups />\r\n      </Tab.Pane>\r\n    )\r\n  }\r\n];\r\n\r\nconst Skills = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <Tab panes={panes} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <p>shibasabのポートフォリオ</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst Products = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <p>作ったもの</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Products;\r\n","import React from 'react';\r\n\r\nconst Contact = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <p>連絡先</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n  return <h1>Not Found</h1>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Component } from 'react';\r\nimport Navigation from './components/Navigation/Navigation';\r\nimport About from './components/About/About';\r\nimport Skills from './components/Skills/Skills';\r\nimport Home from './components/Home/Home';\r\nimport Products from './components/Products/Products';\r\nimport Contact from './components/Contact/Contact';\r\nimport NotFound from './404';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Navigation />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"/skills\" component={Skills} />\r\n            <Route path=\"/products\" component={Products} />\r\n            <Route path=\"/contact\" component={Contact} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}